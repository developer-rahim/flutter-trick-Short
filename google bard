import 'package:biggan_obhidhan/src/core/gen/colors.gen.dart';
import 'package:biggan_obhidhan/src/core/widgets/gobal_snack_bar.dart';
import 'package:biggan_obhidhan/src/core/widgets/primary_button.dart';
import 'package:biggan_obhidhan/src/features/google_bard/presentation/widget/chat_card.dart';
import 'package:biggan_obhidhan/src/features/google_bard/presentation/widget/google_bard_appbar.dart';
import 'package:biggan_obhidhan/src/features/home/presentation/pages/home_page.dart';
import 'package:flutter/material.dart';
import 'package:google_generative_ai/google_generative_ai.dart';
import 'package:markdown/markdown.dart' as md;

/// Packages
 google_generative_ai: ^0.3.2
  flutter_markdown: ^0.7.1
  google_fonts: ^6.2.1


class GoogleBardPage extends StatefulWidget {
  const GoogleBardPage({super.key});

  @override
  State<GoogleBardPage> createState() => _GoogleBardPageState();
}

class _GoogleBardPageState extends State<GoogleBardPage> {
  List<Content> history = [];
  late final GenerativeModel _model;
  late final ChatSession _chat;
  final ScrollController _scrollController = ScrollController();
  final TextEditingController _textController = TextEditingController();
  final FocusNode _textFieldFocus = FocusNode();
  bool _loading = false;
  static const _apiKey =
      'AIzaSyCn82Y1ys2jZxQmWPKyPyIee4HaUHrG4vM'; // https://ai.google.dev/ (Get API key from this link)

  void _scrollDown() {
    WidgetsBinding.instance.addPostFrameCallback(
      (_) => _scrollController.animateTo(
        _scrollController.position.minScrollExtent,
        duration: const Duration(
          milliseconds: 750,
        ),
        curve: Curves.easeOutCirc,
      ),
    );
  }

  @override
  void initState() {
    super.initState();
    _model = GenerativeModel(
      model: 'gemini-pro',
      apiKey: _apiKey,
    );
    _chat = _model.startChat();
  }

  @override
  Widget build(BuildContext context) {
    MediaQuery.of(context).size;
    return Scaffold(
      appBar: GoogleChatAppBar(
        onTap: () {
          commonDialogBox(
              context: context,
              title: 'সতর্কীকরণঃ',
              bodyContent: const Text('তুমি কি সকল চ্যাট মুছে ফেলতে চাই'));
        },
      ),
      drawer: const HomeDrawer(),
      body: Container(
        width: double.maxFinite,
        height: double.maxFinite,
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
            colors: [
              AppColors.primary5,
              AppColors.secondary,
            ],
          ),
        ),
        child: Stack(
          children: [
            ListView.separated(
              padding: const EdgeInsets.fromLTRB(15, 0, 15, 90),
              itemCount: history.reversed.length,
              controller: _scrollController,
              reverse: true,
              itemBuilder: (context, index) {
                var content = history.reversed.toList()[index];
                var text = content.parts
                    .whereType<TextPart>()
                    .map<String>((e) => e.text)
                    .join('');

                return MessageTile(
                  sendByMe: content.role == 'user',
                  message: text,
                );
              },
              separatorBuilder: (context, index) {
                return const SizedBox(height: 15);
              },
            ),
            Align(
              alignment: Alignment.bottomCenter,
              child: Container(
                width: MediaQuery.of(context).size.width,
                padding: const EdgeInsets.symmetric(
                  horizontal: 10,
                  vertical: 10,
                ),
                decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(10),
                  border: Border(
                    top: BorderSide(color: Colors.grey.shade200),
                  ),
                ),
                child: Row(
                  children: [
                    GestureDetector(
                      onTap: () {},
                      child: const Icon(
                        Icons.photo_camera,
                        size: 40,
                        color: AppColors.primary,
                      ),
                    ),
                    const SizedBox(width: 10),
                    Expanded(
                      child: TextField(
                        cursorColor: AppColors.primary,
                        controller: _textController,
                        autofocus: false,
                        focusNode: _textFieldFocus,
                        maxLines: null,
                        decoration: InputDecoration(
                          hintText: 'Ask me anything...',
                          hintStyle: const TextStyle(color: Colors.grey),
                          filled: true,
                          fillColor: Colors.grey.shade200,
                          contentPadding: const EdgeInsets.symmetric(
                            horizontal: 15,
                            vertical: 15,
                          ),
                          border: OutlineInputBorder(
                            borderSide: BorderSide.none,
                            borderRadius: BorderRadius.circular(10),
                          ),
                        ),
                      ),
                    ),
                    const SizedBox(width: 10),
                    GestureDetector(
                      onTap: () {
                        if (_textController.text.isEmpty) {
                          GlobalSnackBar.show(
                              context, 'Please ask me anything...');
                          return;
                        }
                        setState(
                          () {
                            history.add(
                              Content(
                                'user',
                                [TextPart(_textController.text)],
                              ),
                            );
                          },
                        );
                        _sendChatMessage(_textController.text, history.length);
                      },
                      child: Container(
                        width: 50,
                        height: 50,
                        alignment: Alignment.center,
                        decoration: BoxDecoration(
                            color: AppColors.primary,
                            shape: BoxShape.circle,
                            boxShadow: [
                              BoxShadow(
                                offset: const Offset(1, 1),
                                blurRadius: 3,
                                spreadRadius: 3,
                                color: Colors.black.withOpacity(0.05),
                              )
                            ]),
                        child: _loading
                            ? const Padding(
                                padding: EdgeInsets.all(15.0),
                                child: CircularProgressIndicator.adaptive(
                                  backgroundColor: Colors.white,
                                ),
                              )
                            : const Icon(
                                Icons.send_rounded,
                                color: Colors.white,
                              ),
                      ),
                    )
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  commonDialogBox({
    required BuildContext context,
    bool? isDismissible = true,
    final String? title,
    final String? description,
    final String? yesButtonText,
    final String? noButtonText,
    final Widget? bodyContent,
    Function()? onYesPressed,
    Function()? onNoPressed,
    bool? showNoButton = true,
  }) {
    showDialog(
      context: context,
      barrierDismissible: isDismissible ?? false,
      builder: (ctx) {
        return WillPopScope(
          onWillPop: () async => isDismissible ?? false,
          child: AlertDialog(
            title: Center(child: Text(title ?? '')),
            elevation: 0,
            contentPadding: const EdgeInsets.only(
              top: 20,
              left: 10,
              right: 10,
              bottom: 20,
            ),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(20),
            ),
            content: SizedBox(
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  bodyContent ?? const Offstage(),
                  const SizedBox(height: 20),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      (showNoButton == true)
                          ? Container(
                              height: 34,
                              width: 140,
                              margin: const EdgeInsets.only(right: 0),
                              child: PrimaryButton(
                                backgroundColor: AppColors.red,
                                onTap: onNoPressed ??
                                    () => Navigator.of(ctx).pop(),
                                buttonText: 'Cancel',
                              ),
                            )
                          : const SizedBox(),
                      const SizedBox(width: 5),
                      Padding(
                        padding: const EdgeInsets.only(right: 5),
                        child: SizedBox(
                          height: 34,
                          width: 140,
                          child: PrimaryButton(
                            backgroundColor: AppColors.primary,
                            onTap: onYesPressed ??
                                () {
                                  setState(() {
                                    history.clear();
                                  });
                                  Navigator.of(ctx).pop();
                                },
                            buttonText: 'OK',
                          ),
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ),
          ),
        );
      },
    );
  }

  Future<void> _sendChatMessage(String message, int historyIndex) async {
    setState(() {
      _loading = true;
      _textController.clear();
      _textFieldFocus.unfocus();
      _scrollDown();
    });

    List<Part> parts = [];

    try {
      var response = _chat.sendMessageStream(
        Content.text(message),
      );

      await for (var item in response) {
        var text = item.text;
        if (text == null) {
          _showError('No response from API.');
          return;
        } else {
          setState(() {
            _loading = false;
            parts.add(TextPart(text));
            if ((history.length - 1) == historyIndex) {
              history.removeAt(historyIndex);
            }
            history.insert(historyIndex, Content('model', parts));
          });
        }
      }
    } catch (e, t) {
      print(e);
      print(t);
      _showError(e.toString());
      setState(() {
        _loading = false;
      });
    } finally {
      setState(() {
        _loading = false;
      });
    }
  }

  void _showError(String message) {
    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: const Text('Something went wrong'),
          content: SingleChildScrollView(
            child: SelectableText(message),
          ),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
              child: const Text('OK'),
            )
          ],
        );
      },
    );
  }
}






class MessageTile extends StatelessWidget {
  const MessageTile({
    super.key,
    required this.sendByMe,
    required this.message,
  });

  final bool sendByMe;
  final String message;

  @override
  Widget build(BuildContext context) {
    final size = MediaQuery.of(context).size;

    // if (sendByMe) {
    //   print('Question : $message');
    // } else {
    //   print('Answer : $message');
    // }
    return Column(
      crossAxisAlignment:
          sendByMe ? CrossAxisAlignment.end : CrossAxisAlignment.start,
      children: [
        Text(
          sendByMe ? 'You' : 'AI Model',
          style: const TextStyle(
            fontSize: 11.5,
            color: Colors.grey,
          ),
        ),
        const SizedBox(height: 5),
        Row(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Container(
              width: size.width / 1.3,
              padding: const EdgeInsets.symmetric(
                horizontal: 15,
                vertical: 13,
              ),
              decoration: BoxDecoration(
                  color: sendByMe
                      ? AppColors.primary
                      : Theme.of(context).colorScheme.surfaceVariant,
                  borderRadius: BorderRadius.only(
                    bottomLeft: sendByMe
                        ? const Radius.circular(12)
                        : const Radius.circular(5),
                    topLeft: const Radius.circular(12),
                    topRight: const Radius.circular(12),
                    bottomRight: sendByMe
                        ? const Radius.circular(5)
                        : const Radius.circular(12),
                  )),
              child: MarkdownBody(
                styleSheet: MarkdownStyleSheet.fromTheme(
                  ThemeData(
                    textTheme: TextTheme(
                      bodyMedium: GoogleFonts.notoSerifBengali(
                        fontSize: 14,
                        color: sendByMe ? Colors.white : Colors.black,
                      ),
                    ),
                  ),
                ),
                selectable: true,
                data: message,
                extensionSet: md.ExtensionSet(
                  md.ExtensionSet.gitHubFlavored.blockSyntaxes,
                  <md.InlineSyntax>[
                    md.EmojiSyntax(),
                    ...md.ExtensionSet.gitHubFlavored.inlineSyntaxes
                  ],
                ),
                onTapLink: (text, href, title) async {
                  await _launchUrl(text);
                },
              ),
            ),
            if (!sendByMe) ...[
              // const SizedBox(
              //   width: 8,
              // ),
              IconButton(
                onPressed: () async {
                  await Clipboard.setData(
                    ClipboardData(
                      text: message,
                    ),
                  );
                },
                icon: const Icon(
                  Icons.file_copy_outlined,
                  color: AppColors.primary,
                  size: 20,
                ),
              ),
            ]
          ],
        ),
      ],
    );
  }

  Future<void> _launchUrl(String url) async {
    if (!await launchUrl(Uri.parse(url))) {
      throw Exception('Could not launch $url');
    }
  }
}

