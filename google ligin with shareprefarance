//import 'package:fashion_design/Google_login/gobal.dart';
import 'package:fashion_design/Google_login/userProfile_screen.dart';
import 'package:fashion_design/providers/tokenstoreprovider.dart';
import 'package:fashion_design/screens/bottomnav_bar.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:flutter/material.dart';
import 'package:flutter_signin_button/button_view.dart';
import 'package:flutter_signin_button/flutter_signin_button.dart';
import 'package:google_sign_in/google_sign_in.dart';
import 'package:provider/provider.dart';

class LogginScreen extends StatefulWidget {
  @override
  State<LogginScreen> createState() => _LogginScreenState();
}

class _LogginScreenState extends State<LogginScreen> {
  bool signin = true;
  //String daa='hi';

  Future<User?> signInWithGoogle() async {
    try {
      //SIGNING IN WITH GOOGLE
      final GoogleSignInAccount? googleSignInAccount =
          await googleSignIn.signIn();
      final GoogleSignInAuthentication googleSignInAuthentication =
          await googleSignInAccount!.authentication;

      //CREATING CREDENTIAL FOR FIREBASE
      final AuthCredential credential = GoogleAuthProvider.credential(
          idToken: googleSignInAuthentication.idToken,
          accessToken: googleSignInAuthentication.accessToken);

      //SIGNING IN WITH CREDENTIAL & MAKING A USER IN FIREBASE  AND GETTING USER CLASS
      final userCredential = await _auth.signInWithCredential(credential);
      final User? user = userCredential.user;
      TokenProvider? tokenProvider;
      //CHECKING IS ON
      assert(!user!.isAnonymous);
      assert(await user!.getIdToken() != null);

      final User? currentUser = await _auth.currentUser;
      assert(currentUser!.uid == user!.uid);
      print(user);

      if (user != null) {
        Navigator.pushReplacement(
            context,
            MaterialPageRoute(
                builder: ((context) => BottomNavBar(
             
                    ))));
        
      }

      return user;
    } catch (e) {
      print(e);
    }
  }

  void signOut() async {
    await googleSignIn.signOut();
    await _auth.signOut();
  }

  @override
  void initState() {
    TokenProvider tokenProvider =
        Provider.of<TokenProvider>(context, listen: false);
    // TODO: implement initState
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    TokenProvider tokenProvider = Provider.of<TokenProvider>(
      context,
    );
    return Scaffold(
      body: Center(
          child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        crossAxisAlignment: CrossAxisAlignment.center,
        children: [
          SignInButton(Buttons.Google, onPressed: () async {
            final GoogleSignInAccount? googleSignInAccount =
                await googleSignIn.signIn();
            final GoogleSignInAuthentication googleSignInAuthentication =
                await googleSignInAccount!.authentication;
            final AuthCredential credential = GoogleAuthProvider.credential(
                idToken: googleSignInAuthentication.idToken,
                accessToken: googleSignInAuthentication.accessToken);
            final userCredential = await _auth.signInWithCredential(credential);
            final User? user = userCredential.user;
            tokenProvider.settoken('email', user!.email);
             setbooltoken('islogged', user.emailVerified);
                  tokenProvider.setImageToken ('image', user.photoURL);
             tokenProvider.settoken('name', user.displayName);
            signInWithGoogle().then((value) {});
            
          }),
          // ElevatedButton(onPressed: signOut, child: Text('SignOut'))
        ],
      )),
    );
  }
}

final FirebaseAuth _auth = FirebaseAuth.instance;
 //final GoogleSignIn googleSignIn = GoogleSignIn();




import 'package:fashion_design/Google_login/signin_screen.dart';
import 'package:fashion_design/main.dart';
import 'package:fashion_design/providers/tokenstoreprovider.dart';
import 'package:fashion_design/screens/bottomnav_bar.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:google_sign_in/google_sign_in.dart';
import 'package:provider/provider.dart';

final FirebaseAuth _auth = FirebaseAuth.instance;
final GoogleSignIn googleSignIn = GoogleSignIn();

class UserInfoScreen extends StatefulWidget {
  // UserInfoScreen({Key? key, required User user, })
  //     : _user = user,
    
  //       super(key: key);

  // final User _user;
  // bool islogged = false;

  @override
  _UserInfoScreenState createState() => _UserInfoScreenState();
}

class _UserInfoScreenState extends State<UserInfoScreen> {
  // late User _user;
  // bool _isSigningOut = false;
  void signOut() async {
    await googleSignIn.signOut();
    await _auth.signOut();
  }

  bool? isloging;
  @override
  void initState() {
   TokenProvider tokenProvider=Provider.of(context,listen: false);
    // print(widget.islogged);
    // _user = widget._user;
//print(tokenProvider.token);
tokenProvider.gettoken();

print(  'Email ${tokenProvider.useremail}');
print(  'name ${tokenProvider.usernam}');
    super.initState();
   // gettoken();
  }
// gettoken()async{
//       TokenProvider tokenProvider=Provider.of(context,listen: false);
//       final data=await tokenProvider.gettoken();
//  return data;
// }
  @override
  Widget build(BuildContext context) {
      TokenProvider tokenProvider=Provider.of(context,);
      tokenProvider.useremail;
      tokenProvider.usernam;
    return Scaffold(
    appBar: AppBar(title: Text('Profile'),centerTitle: true,elevation: 0,backgroundColor: Colors.grey,),
      body: SafeArea(
        child: Padding(
          padding: const EdgeInsets.only(
            left: 16.0,
            right: 16.0,
            bottom: 20.0,
          ),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Row(),
           tokenProvider. islogged ==true
                  ? ClipOval(
                      child: Material(
                        child: Image.network(
                       tokenProvider.image!,
                          fit: BoxFit.fitHeight,
                        ),
                      ),
                    )
                  : ClipOval(
                      child: Material(
                        child: Padding(
                          padding: const EdgeInsets.all(16.0),
                          child: Icon(
                            Icons.person,
                            size: 60,
                          ),
                        ),
                      ),
                    ),
              SizedBox(height: 16.0),
         tokenProvider.islogged == false
                  ? Text(
                      'Hello',
                      style: TextStyle(
                        fontSize: 26,
                      ),
                    )
                  : Container(),
              SizedBox(height: 8.0),
              Text(
                tokenProvider.usernam!,
                style: TextStyle(
                  fontSize: 26,
                ),
              ),
              SizedBox(height: 8.0),
              Text(
                ' ${tokenProvider.useremail!} ',
                style: TextStyle(
                  fontSize: 20,
                  letterSpacing: 0.5,
                ),
              ),
              SizedBox(height: 24.0),
              Text(
                'You are now signed in using your Google account. To sign out of your account, click the "Sign Out" button below.',
                style: TextStyle(fontSize: 14, letterSpacing: 0.2),
              ),
              SizedBox(height: 16.0),
            ElevatedButton(
                      style: ButtonStyle(
                        backgroundColor: MaterialStateProperty.all(
                          Colors.redAccent,
                        ),
                        shape: MaterialStateProperty.all(
                          RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(10),
                          ),
                        ),
                      ),
                      onPressed: () async {
                        // setState(() {
                        //   _isSigningOut = true;
                        // });
                    // tokenProvider.remove();
                        signOut();
                        tokenProvider.islogged=false;
                        // setState(() {
                        //   _isSigningOut = false;
                        // });
                        print(tokenProvider.islogged);
                        Navigator.pushReplacement(context, MaterialPageRoute(builder: ((context) => LogginScreen())));
                      },
                      child: Padding(
                        padding: EdgeInsets.only(top: 8.0, bottom: 8.0),
                        child: Text(
                          'Sign Out',
                          style: TextStyle(
                            fontSize: 20,
                            fontWeight: FontWeight.bold,
                            color: Colors.white,
                            letterSpacing: 2,
                          ),
                        ),
                      ),
                    ),
            ],
          ),
        ),
      ),
    );
  }
}






import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
  bool? islogged;
   setbooltoken(key,value)async{
    SharedPreferences prefs=await SharedPreferences.getInstance();
    prefs.setBool(key, value);
    print('bookvalue $value');
  }

class TokenProvider extends ChangeNotifier {
  String? usernam;
  String? useremail;
  bool? islogged;
  String? image;
  settoken(key, value) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();

    prefs.setString(key, value!);

   
  }
  setbooltoken(key,value)async{
    SharedPreferences prefs=await SharedPreferences.getInstance();
    prefs.setBool(key, value);
    print('bookvalue $value');
  }
   setImageToken(key,value)async{
    SharedPreferences prefs=await SharedPreferences.getInstance();
    prefs.setString(key, value);
    print('image link $value');
  }

  gettoken() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    String email = prefs.getString('email') ?? 'Email  isn\'t set';
    String name = prefs.getString('name') ?? 'Name  isn\'t set';
    bool? islogeed = prefs.getBool("islogged");
    String imagelink = prefs.getString('image') ?? 'Hello';
    image = imagelink;
    usernam = name;
    useremail = email;
    islogged = islogeed;
    print(email + "<<<<<<,");
    print(name + "<<<<<<,");
    notifyListeners();
  }

  remove() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    prefs.remove("email");
    prefs.remove("name");
    prefs.remove("image");
    prefs.remove('islogged');
  }
//   showToken()async{
//  await gettoken();
//  notifyListeners();
// }
}

